// <auto-generated />
using System;
using Iduca.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Iduca.Persistence.Migrations
{
    [DbContext(typeof(IducaContext))]
    partial class IducaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Iduca.Domain.Models.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("alternative_id");

                    b.HasIndex("QuestionId");

                    b.ToTable("tb_alternative", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("category_id");

                    b.ToTable("tb_category", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("company_id");

                    b.ToTable("tb_company", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Image")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("image");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("char(36)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("content_id");

                    b.HasIndex("LessonId");

                    b.ToTable("tb_content", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int")
                        .HasColumnName("difficulty");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("char(36)")
                        .HasColumnName("exam_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int")
                        .HasColumnName("total_hours");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("course_id");

                    b.HasIndex("ExamId")
                        .IsUnique();

                    b.ToTable("tb_course", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("exam_id");

                    b.ToTable("tb_exam", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("exercise_id");

                    b.HasIndex("ModuleId");

                    b.ToTable("tb_exercise", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("VideoLink")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("video_link");

                    b.HasKey("Id")
                        .HasName("lesson_id");

                    b.HasIndex("ModuleId");

                    b.ToTable("tb_lesson", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ActionUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("action_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("message");

                    b.Property<Guid?>("RelatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("related_id");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("log_id");

                    b.HasIndex("UserId");

                    b.ToTable("tb_log", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("module_id");

                    b.HasIndex("CourseId");

                    b.ToTable("tb_module", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("question_id");

                    b.ToTable("tb_question", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("reminder_id");

                    b.HasIndex("UserId");

                    b.ToTable("tb_reminder", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("identity");

                    b.Property<string>("Image")
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("responsible_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("user_id");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("tb_user", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.UserCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Certificate")
                        .HasColumnType("longtext")
                        .HasColumnName("certificate");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("disabled_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_course_id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("tb_usercourse", (string)null);
                });

            modelBuilder.Entity("course_category", b =>
                {
                    b.Property<Guid>("category_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("course_id")
                        .HasColumnType("char(36)");

                    b.HasKey("category_id", "course_id");

                    b.HasIndex("course_id");

                    b.ToTable("course_category", (string)null);
                });

            modelBuilder.Entity("exam_questions", b =>
                {
                    b.Property<Guid>("exam_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("question_id")
                        .HasColumnType("char(36)");

                    b.HasKey("exam_id", "question_id");

                    b.HasIndex("question_id");

                    b.ToTable("exam_questions", (string)null);
                });

            modelBuilder.Entity("exercise_questions", b =>
                {
                    b.Property<Guid>("exercise_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("question_id")
                        .HasColumnType("char(36)");

                    b.HasKey("exercise_id", "question_id");

                    b.HasIndex("question_id");

                    b.ToTable("exercise_questions", (string)null);
                });

            modelBuilder.Entity("user_alternative", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("alternative_id")
                        .HasColumnType("char(36)");

                    b.HasKey("user_id", "alternative_id");

                    b.HasIndex("alternative_id");

                    b.ToTable("user_alternative", (string)null);
                });

            modelBuilder.Entity("user_interest", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("char(36)");

                    b.HasKey("user_id", "category_id");

                    b.HasIndex("category_id");

                    b.ToTable("user_interest", (string)null);
                });

            modelBuilder.Entity("user_lesson", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("lesson_id")
                        .HasColumnType("char(36)");

                    b.HasKey("user_id", "lesson_id");

                    b.HasIndex("lesson_id");

                    b.ToTable("user_lesson", (string)null);
                });

            modelBuilder.Entity("Iduca.Domain.Models.Alternative", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Content", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Lesson", "Lesson")
                        .WithMany("Contents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Course", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Exam", "Exam")
                        .WithOne("Course")
                        .HasForeignKey("Iduca.Domain.Models.Course", "ExamId");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Exercise", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Module", "Module")
                        .WithMany("Exercises")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Lesson", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Log", b =>
                {
                    b.HasOne("Iduca.Domain.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Module", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Reminder", b =>
                {
                    b.HasOne("Iduca.Domain.Models.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iduca.Domain.Models.User", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Iduca.Domain.Models.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("Iduca.Domain.Models.UserCourse", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iduca.Domain.Models.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("course_category", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iduca.Domain.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("exam_questions", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iduca.Domain.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("exercise_questions", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("exercise_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iduca.Domain.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("user_alternative", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Alternative", null)
                        .WithMany()
                        .HasForeignKey("alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iduca.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("user_interest", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iduca.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("user_lesson", b =>
                {
                    b.HasOne("Iduca.Domain.Models.Lesson", null)
                        .WithMany()
                        .HasForeignKey("lesson_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iduca.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iduca.Domain.Models.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Course", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Exam", b =>
                {
                    b.Navigation("Course")
                        .IsRequired();
                });

            modelBuilder.Entity("Iduca.Domain.Models.Lesson", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Module", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Iduca.Domain.Models.Question", b =>
                {
                    b.Navigation("Alternatives");
                });

            modelBuilder.Entity("Iduca.Domain.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Logs");

                    b.Navigation("Reminders");
                });
#pragma warning restore 612, 618
        }
    }
}
